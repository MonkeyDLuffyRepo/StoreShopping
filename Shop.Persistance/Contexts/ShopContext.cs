// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Shop.Persistance.Entities;
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Shop.Persistance.Entities;

namespace Shop.Persistance.Contexts
{
    public partial class ShopContext : DbContext
    {
        public ShopContext()
        {
        }

        public ShopContext(DbContextOptions<ShopContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Color> Colors { get; set; }
        public virtual DbSet<Conservation> Conservations { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Originality> Originalities { get; set; }
        public virtual DbSet<Panier> Paniers { get; set; }
        public virtual DbSet<PanierProduct> PanierProducts { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Region> Regions { get; set; }
        public virtual DbSet<ShopStore> ShopStores { get; set; }
        public virtual DbSet<Taste> Tastes { get; set; }
        public virtual DbSet<Vintage> Vintages { get; set; }
        public virtual DbSet<Volume> Volumes { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Category>(entity =>
            {
                entity.ToTable("Category");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(150);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Color>(entity =>
            {
                entity.ToTable("Color");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Conservation>(entity =>
            {
                entity.ToTable("Conservation");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.ToTable("Country");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Customer>(entity =>
            {
                entity.ToTable("Customer");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Birthday).HasColumnType("datetime");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModificationDate).HasColumnType("datetime");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(80);
            });

            modelBuilder.Entity<Originality>(entity =>
            {
                entity.ToTable("Originality");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Panier>(entity =>
            {
                entity.ToTable("Panier");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.ModificationDate).HasColumnType("datetime");

                entity.Property(e => e.TotalAmount).HasColumnType("decimal(14, 4)");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Paniers)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Panier_Customer");
            });

            modelBuilder.Entity<PanierProduct>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.PanierId, e.CreationDate });

                entity.ToTable("PanierProduct");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.ModificationDate).HasColumnType("datetime");

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(10, 4)");

                entity.HasOne(d => d.Panier)
                    .WithMany(p => p.PanierProducts)
                    .HasForeignKey(d => d.PanierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PanierProduct_Panier");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.PanierProducts)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PanierProduct_Product");
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.ToTable("Product");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(150);

                entity.Property(e => e.Designation).HasMaxLength(50);

                entity.Property(e => e.ModificationDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PicturesPath).HasMaxLength(150);

                entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");

                entity.Property(e => e.Reference).HasMaxLength(15);

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Product_Category");

                entity.HasOne(d => d.Color)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.ColorId)
                    .HasConstraintName("FK_Product_Color");

                entity.HasOne(d => d.Conservation)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.ConservationId)
                    .HasConstraintName("FK_Product_Conservation");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Product_Country");

                entity.HasOne(d => d.Originality)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.OriginalityId)
                    .HasConstraintName("FK_Product_Originality");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.RegionId)
                    .HasConstraintName("FK_Product_Region");

                entity.HasOne(d => d.Taste)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.TasteId)
                    .HasConstraintName("FK_Product_Taste");

                entity.HasOne(d => d.Vintage)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.VintageId)
                    .HasConstraintName("FK_Product_Vintage");

                entity.HasOne(d => d.Volume)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.VolumeId)
                    .HasConstraintName("FK_Product_Volume");
            });

            modelBuilder.Entity<Region>(entity =>
            {
                entity.ToTable("Region");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ShopStore>(entity =>
            {
                entity.ToTable("ShopStore");

                entity.Property(e => e.Address).IsRequired();

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ModificationDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<Taste>(entity =>
            {
                entity.ToTable("Taste");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Vintage>(entity =>
            {
                entity.ToTable("Vintage");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Volume>(entity =>
            {
                entity.ToTable("Volume");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}